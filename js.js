var XRegExp = require('xregexp').XRegExp;
var messageFormat = require('./messageformat');

var create = function(doc, nsPrefix, lang, id) {
  var ret = '';

  var ns = _getLngNs(nsPrefix, lang, doc, doc.ns);

  ret += "// Content below is autogenerated by gcin\n";
  ret += "// usually there is no reason to edit it manually\n\n";
  ret += "goog.provide('" + ns + "');\n";
  ret += "\n";

  if (doc.patch) {
    var patchNs = _getLngNs(nsPrefix, lang, doc, doc.patch);
    ret += "// Patch for " + doc.patch + '\n';
    ret += "goog.require('" + patchNs + "');\n";
    ret += "\n" + ns + ".patch = function() {\n";
    ns = patchNs;
  }

  var msgsRet = '';

  doc.msgs.forEach(function(msg, pos) {
    var msgName = ["MSG", (lang || 'self').toUpperCase(), msg.id.toUpperCase(), id, pos].join('_');

    // if lang is not defined create js with sourse language
    var translation = lang ? msg.translation : msg.body;

    if (doc.patch) {
      if (!doc.docs[doc.patch]) {
        throw new Error('Can\'t find ' + doc.patch + ' for patching');
      }
      var hasMsgForPatch = doc.docs[doc.patch].msgs.some(function(m) {
        return msg.id === m.id;
      });
      if (!hasMsgForPatch) {
        throw new Error('Can\'t find message ' + msg.id + ' in ' + doc.patch + ' for patching');
      }
    }

    if (msg.type == 'msgf') {
      translation = translation.replace(/\n\s*/g, '').replace(/\<%\s*@space\s*%\>/g, ' ');
      try {
        var mf = messageFormat(translation.replace(/\{\$(.+?)\}/g, 'REPLACEMENT'), lang || doc.source);
      } catch(err) {
        console.log('Can\'t parse ' + msg.id + ' in ' + doc.ns);
        throw err;
      }
    } else {
      translation.replace(/\<%\s*@space\s*%\>/g, ' ');
    }

    var props = {};
    XRegExp.forEach(translation, /\{\$(.+?)\}/, function (match, i) {
      props[match[1]] = true;
    });

    var properties = [];
    for (var name in props) {
      properties.push(name);
    }

    msgsRet += "\n";
    if (properties.length > 0) {
      msgsRet += "/** @param {Object} options */\n";
      msgsRet += ns + "." + msg.id + " = function(options) {\n";
    } else {
      msgsRet += ns + "." + msg.id + " = function() {\n";
    }

    msgsRet += "  /**  @desc " + (msg.desc || msg.id) + " */\n";
    msgsRet += "  var " + msgName + " = goog.getMsg(";

    var multiline = translation.indexOf('\n') != -1;
    var spaces = '';
    if (multiline) {
      spaces += '  ';
      msgsRet += "\n" + spaces + "  '" + translation.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(/\n/g, "' +\n" + spaces + "  '") + "'\n";
    } else {
      msgsRet += "'" + translation.replace(/\\/g, '\\\\').replace(/'/g, "\\'") + "'";
    }

    if (properties.length > 0) {
      msgsRet += ", {\n";
      properties.forEach(function(prop, pos) {
        if (pos > 0) {
          msgsRet += ",\n";
        }
        msgsRet += spaces + "    '" + prop.replace(/'/g, "\\'") + "': options";
        if ((/^[_a-zA-Z][_a-zA-Z0-9]*$/).test(prop)) {
          msgsRet += '.' + prop;
        } else {
          msgsRet += "['" + prop.replace(/'/g, "\\'") + "']";
        }
      });
      msgsRet += "\n" + spaces + "  }";
    }

    if (multiline) {
      msgsRet += spaces + ");\n";
    } else {
      msgsRet += ");\n";
    }

    msgsRet += "  return " + msgName + ";\n";
    msgsRet += "};\n";
  });

  if (doc.patch) {
    msgsRet = '  ' + msgsRet.replace(/\n/g, '\n  ');
  }

  ret += msgsRet;

  if (doc.patch) {
    ret += "\n};\n";
  }

  return ret;
};


var createUnion = function(doc, nsPrefix, langs) {
  var ret = '';

  ret += "// Content below is autogenerated by gcin\n";
  ret += "// usually there is no reason to edit it manually\n\n";

  var ns = doc.ns;
  if (nsPrefix) {
    ns = [nsPrefix, doc.ns].join('.');
  }

  ret += "goog.provide('" + ns + "');\n";
  langs.forEach(function(lang, pos) {
    var lngNs = _getLngNs(nsPrefix, lang, doc, doc.ns);
    ret += "goog.require('" + lngNs + "');\n";
  });
  ret += "\n";

  langs.forEach(function(lang, pos) {
    var lngNs = _getLngNs(nsPrefix, lang, doc, doc.ns);
    if (pos > 0) {
      ret += "\n";
    }
    ret += "if (goog.LOCALE == '" + lang + "') {\n";
    ret += "  " + ns + " = " + lngNs + ";\n";
    ret += "}\n";
  });

  return ret;
};

var _getLngNs = function(nsPrefix, lang, doc, value) {
  var ns = ['lang', (lang || doc.source), value].join('.');
  if (nsPrefix) {
    ns = [nsPrefix, 'lang', (lang || doc.source), value].join('.');
  }

  return ns;
};

module.exports = {
  create: create,
  createUnion: createUnion
};